一、xcloud-cloud2cloud
1、HaierDataReportController  海尔云
    （1）设备数据上报  （redis中存储set数据 ，设备did为key，设备绑定的用户列表为value）

2、华为设备状态上报 使用了spring的事件发布机制  applicationContext.publishEvent()，来进行设备的新增、删除、状态、基本信息等状态的上报

3、FastjsonEncoder  编码器使用单例模式

4、可以把所有云对云的请求，优化为 模板方法模式

5、科大讯飞语音控制接口逻辑很复杂，关键是各种属性的转换


二、xcloud-job
1、消息推送，使用类注解，来减少if的判断，从而进行不同类型的的消息的分发，见图片 1-1.
    MessagePushJob类pushDispacher方法

2、对于不同限定类型的消息，可以使用线程池来进行推送，从而提高效率。


三、xcloud-common-utils
1、使用反射+自定义注解的方式，进行请求参数的校验

2、属性转Map方法，也是用反射
    public static Object convertMap(Class type, Map map)
                throws IntrospectionException, IllegalAccessException,
                InstantiationException, InvocationTargetException {

            BeanInfo beanInfo = Introspector.getBeanInfo(type); // 获取类属性
            Object obj = type.newInstance(); // 创建 JavaBean 对象

            // 给 JavaBean 对象的属性赋值
            PropertyDescriptor[] propertyDescriptors =  beanInfo.getPropertyDescriptors();
            for (int i = 0; i< propertyDescriptors.length; i++) {
                PropertyDescriptor descriptor = propertyDescriptors[i];
                String propertyName = descriptor.getName();

                if (map.containsKey(propertyName)) {
                    // 下面一句可以 try 起来，这样当一个属性赋值失败的时候就不会影响其他属性赋值。
                    Object value = map.get(propertyName);

                    Object[] args = new Object[1];
                    args[0] = value;

                    descriptor.getWriteMethod().invoke(obj, args);
                }
            }
            return obj;
        }

3、单例模式一般用在工具类、工厂、本地缓存、ZookeeperClient


四、xcloud-config：zookeeper管理器
1、使用ResourceBundle 来获取properties中的配置信息
2、使用TreeSet获取某个路径下最小的子节点数据，用于CS获取CM地址
3、使用了CuratorFramwork框架
4、使用递归方法，初始化zookeeper的节点数据
5、使用了两个监听
    （1）监听连接状态  ConnectionStateListener
    （2）监听节点变化  TreeCache

五、xcloud-file-util
1、IniFileReader 中使用HashTable来保存 文件服务器连接相关的属性， 从而保证线程安全。

2、使用fastDfs进行文件管理
    （1）大致逻辑：首先维护一个fastDfs文件服务器地址（InetSocketAddress）列表。然后从文件地址列表中取得一个InetSocketAddress地址，并创建Socket。
        socket打开连接，组装要传输文件的Header、body，并进行一系列的文件大小的校验。然后使用socket进行流传输。 然后使用socket接收fastDfs服务器的
        返回结果。

    （2）从地址列表中获取地址的逻辑很简单，就是简单的轮询获取。此时或进行加锁，来保证线程安全。

六、xcloud-generic-service
1、通过spring的事件发布机制，来实现 属性值的初始化

      /**
       * @author wanglinyong
       */
      public class ResourceLoadApplicationListener implements ApplicationListener<ApplicationEnvironmentPreparedEvent>, Ordered {
          private Logger logger = LoggerFactory.getLogger(this.getClass());

          private static final String RESOURCE_PATH = "classpath:generic-service.properties";
          public static final int DEFAULT_ORDER = Ordered.HIGHEST_PRECEDENCE + 5;

          @Override
          public void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {
              ConfigurableEnvironment environment = event.getEnvironment();
              try {
                  environment.getPropertySources().addLast(new ResourcePropertySource(RESOURCE_PATH));
                  logger.info("Load generic service resource.");
              } catch (IOException e) {
                  logger.error("Load generic service resource error!", e);
              }
          }

          @Override
          public int getOrder() {
              return DEFAULT_ORDER;
          }
      }



十、项目缺点：
    （1）一个方法中的逻辑太长，代码达到几百行
    （2）微服务的服务之间调用混乱

    （3）企鹅平台消息推送，使用了两层 mq 跳转复杂，消耗时间。

    （4）
    RedisLock   自定义分布式锁（有bug，需改进，30s过期后，分布式锁失效）
    （1） 设置了超时时间
    （2）使用了volatile  修饰的 locked 标志
    （3）设置锁过期时间


十一、项目逻辑比较复杂的地方
    （1）消息推送 的 逻辑最为 复杂
    （2）文章管理

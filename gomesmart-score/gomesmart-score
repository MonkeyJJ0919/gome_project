一、架构分析：采用无xml的SpringMvc配置，通过tomcat启动项目
1、DispatcherServlet的配置
    WebApplication继承AbstractAnnotationConfigDispatcherServletInitializer

    关于 AbstractAnnotationConfigDispatcherServletInitializer

    各位好，如果以上介绍不过瘾，这里是复杂来说…
    在 Servlet 3.0（Tomcat7及以上版本） 环境下，Servlet 容器会在 classpath 下搜索实现了 javax.servlet
    .ServletContainerInitializer 接口的任何类，找到之后用它来初始化 Servlet 容器。
    Spring 实现了以上接口，实现类叫做 SpringServletContainerInitializer， 它会依次搜寻实现了 WebApplicationInitializer的任何类，
    并委派这个类实现配置。之后，Spring 3.2 开始引入一个简易的 WebApplicationInitializer 实现类，这就是 AbstractAnnotationConfigDispatcherServletInitializer。
    所以 SpittrWebAppInitializer 继承 AbstractAnnotationConfigDispatcherServletInitializer之后，也就是间接实现了 WebApplicationInitializer，
    在 Servlet 3.0 容器中，它会被自动搜索到，被用来配置 servlet 上下文。

    @javax.annotation.Generated(value = "class io.swagger.codegen.languages.SpringMVCServerCodegen", date = "2016-06-01T01:58:27.457Z")
    public class WebApplication extends AbstractAnnotationConfigDispatcherServletInitializer {

        @Override
        protected Class<?>[] getRootConfigClasses() {
    //        return new Class[] { IntegralConfig.class};
            return new Class[] { MybatisConfig.class, ScoreConfig.class };
        }

        @Override
        protected Class<?>[] getServletConfigClasses() {
            return new Class<?>[] { WebMvcConfiguration.class, };
        }

        @Override
        protected String[] getServletMappings() {
            return new String[] { "/" };
        }

        @Override
     protected Filter[] getServletFilters() {
                  return new Filter[]{
                          new MyFilter()
                  };
            }
        @Override
        public void onStartup(ServletContext servletContext) throws ServletException {

    //    	DelegatingFilterProxy filter = new DelegatingFilterProxy();
    //
    //    	Dynamic f = servletContext.addFilter("springSecurityFilterChain", filter);
    //    	EnumSet<DispatcherType> dispatcherTypes = EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.ERROR);
    //    	f.addMappingForUrlPatterns(dispatcherTypes, true, "/*");
            ClassPathXmlApplicationContext context =
                    new ClassPathXmlApplicationContext("classpath*:gcache.xml");
            ApiConstantsConfig apiConstantsConfig = (ApiConstantsConfig) context.getBean("apiConstantsConfig");
            EnvironmentConfigCache.setApiConstantsConfig(apiConstantsConfig);
        	super.onStartup(servletContext);
        }
    }


2、SpringMvc的配置：WebMvcConfiguration继承了WebMvcConfigurationSupport

    @Configuration
    @ComponentScan(basePackages = "net.machtalk.xcloud.score")
    public class WebMvcConfiguration extends WebMvcConfigurationSupport {
        @Override
        public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
            configurer.enable();
        }

        @Bean
        public InternalResourceViewResolver getInternalResourceViewResolver() {
            InternalResourceViewResolver internalResourceViewResolver = new InternalResourceViewResolver();
            internalResourceViewResolver.setPrefix("/WEB-INF/views/");
            internalResourceViewResolver.setSuffix(".jsp");
            return internalResourceViewResolver;
        }

    //    @Bean
    //    public CommonsMultipartResolver multipartResolver() throws IOException {
    //		Resource resource = new ClassPathResource("/faceimage.properties");
    //		Properties props = PropertiesLoaderUtils.loadProperties(resource);
    //
    //    	CommonsMultipartResolver m = new CommonsMultipartResolver();
    //    	m.setUploadTempDir(new FileSystemResource(props.getProperty("faceimage.dir")));
    //    	m.setMaxUploadSize(10240000);
    //    	return m;
    //    }
    }

    （1）Spring boot 中的WebMvcConfigurerAdapter、WebMvcConfigurationSupport与WebMvcConfigurer区别
        WebMvcConfigurerAdapter已经过时，不再维护。
        WebMvcConfigurationSupport与WebMvcConfigurerAdapter、接口WebMvcConfigurer处于同一个目录下，
        并且拥有更多的方法与属性（WebMvcConfigurer中有的方法，此类中全都存在）

3、环境配置
   （1）在pom.xml中进行多环境配置
   （2）spring的xml无法直接使用pom.xml中的配置，需要通过properties文件引入pom.xml中的配置，再在spring的xml中引入properties

二、业务分析
1、ActivityController：活动相关的接口
    （1）查询用户连续签到天数：先查询是否有兑换记录，有则返回。在redis中存储用户json（包括总签到次数和最新签到日期），通过比较每次的日期间隔
        以及总签到次数来比较是否连续签到7天。

    （2）连续7天签到领取大米：redia使用setNX加分布式锁，从redis获取连续签到天数，若大于等于7天并且兑换记录为空，则保存兑换记录

    （3）活动的开启和关闭：在redis中存值控制活动的开启和关闭。不好，应该在数据库中存储。

    （4）绑定冰箱领取数据线活动：调用远程接口判断是否领取数据线，未领取过则保存兑换记录，更新积分明细，最后更新绑定冰箱领取数据线状态。

2、ScoreController：积分相关接口
    （1）设置签到提醒标志：notify_config表

    （2）获取签到提醒标志

    （3）获取签到列表

    （4）签到领积分接口：加分布式锁，从缓存中获取连续签到天数和签到日期，根据不同的连续签到天数，增加不同的积分（包括积分总数和积分明细）。
        更新签到天数

    （5）查询总积分：总积分、是否签到标志、discountsQuantity

    （6）设备控制、设备监测得积分：每天设备第一次控制得积分（穿插了空调连续7天控制送大米逻辑）；每周设备第一次监测得积分

    （7）分页查询积分流水

    （8）邀请用户获取积分：主用户邀请用户，score_detail记录邀请记录，invite_status（邀请状态，被邀请人已经下载并注册app），invitee_uid(被邀请人uid)
                        被邀请人下载注册app后，通过mq消费消息，更新主邀请人得积分。

3、ScoreExchangeController：积分兑换相关接口
    （1）保存地址、修改默认地址、查找地址

    （2）商品列表查询：product和score_product关联

    （3）积分兑换（逻辑最为复杂）：首先一系列判断（积分是否足够，是否有该商品，地址是否为空，手机号是否为空）。然后兑换分为限时兑换和普通兑换，
        限时兑换时间的校验，限时兑换每日限兑一次得逻辑处理（根据兑换记录表中的日期是否为当前日期来判断）。然后是库存的判断、商品上下架的判断。
        兑换的真正逻辑，先加分布式锁。如果是管家优惠券，需要调用管家优惠券领取。更新商品库存，更新商品兑换次数，增加总积分、积分明细记录，添加
        兑换记录，根据时间从远到近扣减积分。解锁。

        从远到近扣减积分逻辑：每次取一千条，比较取出的积分是否足够扣减，不够继续取。

    （4）获取过期积分：积分一年时间过期

    （5）邀请得积分：调第三方登录接口防黑产，同一用户不可被重复邀请，更新邀请人、被邀请人积分明细和总积分

    （6）获取积分抽奖奖品列表：从数据库获取奖品列表，redis中存放奖品得库存，redis存放抽奖得次数

    （7）积分抽奖（逻辑较复杂）：判断积分数是否足够，判断抽奖次数是否用完，将奖品得概率以数字区间得形式表示。生成随机数，看随机数落在哪个区间即为
        中奖。扣减总积分，插入积分明细，若奖品为积分，则增加一条积分记录，若奖品为实物，则增加一条兑换记录。然后从远到近扣减积分流水。更新redis中
        得抽奖次数。

    （8）中奖接口：中奖后，更新兑换记录得联系人地址，联系方式等。

    （9）获取限时兑换商品列表：当日已兑换过得商品不能再兑换，根据限时兑换得时间分别设置兑换状态。

    （10）